#!/usr/bin/env bash

# bluetooth: manage bluetooth
#            requires bluez bluez-tools and might also require:
#            /usr/lib/pulse-15.0/modules/libbluez5-util.so
#            /usr/lib/udev/hid2hci
#
#   bluetooth scan          show available devices
#   bluetooth paired        show previously paired
#   bluetooth connect <ID>  connect
#   bluetooth disable       disable bluetooth entirely


# sudo call integrity check: only root should be able to change script
l=($(/usr/bin/ls -l `/usr/bin/readlink -f $0`))
([ ${l[0]:2:1} != "-" ] && [ "${l[2]}" != "root" ]) ||
([ ${l[0]:5:1} != "-" ] && [ "${l[3]}" != "root" ]) ||
 [ ${l[0]:8:1} != "-" ] && { echo -e "only root should be able to modify\n${l[@]}"; 
                             [[ "$DEBUG" = "1" ]] || exit 1; }

# stop if a command is missing
err=0
for cmd in bluetoothctl rfkill /usr/lib/bluetooth/bluetoothd ; do
		command -v $cmd >/dev/null && continue || { echo "$cmd command not found."; err=1; }
done
test $err -eq 1 && exit 1

###
# create usage from case statement. 
# Strict formatting: space tabbed exactly 2 or 4 depth
# 
#  case "$1" in
#    list)
#    # description line
#    # description line2 
#    # ...
usage_self ()
{
  echo -en "usage: $(basename "$0") ";
  grep  -P '^ {2,4}[^ \(\*]*\)' $0 \
  | sed -e 's/)//g' -e 's/ +/ /g' -e 's/--//g' \
  | xargs | sed 's/ /\|/g' ;
  echo "";
  grep -P '^ {2,4}[^ \(\*]*\)' -A 30 $0 \
  | grep -P -B 1 '^ {2,4}#' \
  | sed -e 's/# //' -e 's/--//g' ;
  echo "";
}

test $DEBUG && set -x

case "$1" in
  list|scan)
  # scan for devices
    $0 enable || exit 1
    echo "scanning"
    { echo scan on; 
      sleep 8;      } | bluetoothctl
    echo -e "devices" | bluetoothctl
    ;;
  paired)
  # show paired devices
    $0 enable || exit 1
    echo "paired-devices" | bluetoothctl
    ;;
  auto)
  # connect to first available known device
    $0 enable || exit 1
    PAIRED=$(echo "paired-devices" | bluetoothctl | grep -E "^Device")
    test -z "$PAIRED" \
    && echo "No previously paired devices, try scan and connect first" \
    && exit 1
    PAIREDIDS=$(echo "$PAIRED" | awk '{print $2}')
    #$0 scan
    DEVICES=$(echo -e "devices" | bluetoothctl)
    for ID in $PAIREDIDS ; do
      echo -n "# Try connecting to: " \
      && echo "$PAIRED" | grep $ID \
      && $0 connect $ID | sed 's/^/  /'
    done
    ;;
  connect)
  # connect too know device or device addresss give as argument
    test -z "$2" && $0 help && exit 1
    $0 enable || exit 1
    echo "paired-devices" | bluetoothctl | grep -q "$2" \
    || { echo "pair $2"; 
         sleep 8; }       | bluetoothctl
     
    { echo "connect $2"; 
      sleep 8; }          | bluetoothctl

    ;;
  enable)
  # enable bluetooth
    env ps aux | grep -v grep | grep -q bluetoothd \
    && exit 0 # already running, asume already enabled
    rfkill unblock bluetooth || exit 1
    sleep 1
    lsmod | grep -q btusb \
    || modprobe btusb || exit 1
    env ps aux | grep -v grep | grep -q bluetoothd \
    || /usr/lib/bluetooth/bluetoothd & #--nodetach # to see log
    sleep 2
    echo "power on" | bluetoothctl 
    sleep 1
    ;;
  disable)
  # disable bluetooh
    killall bluetoothd
    rmmod btusb
    rfkill block bluetooth
    ;;
  help|*)
  # show help
    usage_self
    ;;
esac

exit 1
