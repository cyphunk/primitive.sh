#!/usr/bin/bash
# Script to setup external display(s). 

# stop if a command is missing
err=0
for cmd in xrandr; do
		command -v $cmd >/dev/null && continue || { echo "$cmd command not found."; err=1; }
done
test $err -eq 1 && exit 1

# create usage from case statement. 
# Strict formatting: space tabbed exactly 2 or 4 depth
# 
#   case "$1" in
#     list)
#     # description line
#     # description line2 
#     # ...
usage_self ()
{
    echo -en "usage: $(basename "$0") ";
    grep  -P '^  {2,4}[^ \(\*]*\)' $0 | sed -e 's/)//g' -e 's/ +/ /g' -e 's/--//g' | xargs | sed 's/ /\|/g' ;
    echo "";
    grep -P '^ {2,4}[^ \(\*]*\)' -A 30 $0 | grep -P -B 1 '^ {2,4}#' | sed -e 's/# //' -e 's/--//g' ;
    echo "";
}

# monitor names with resolution defined=active. no resolution means connected by not active
ACTIVE=$(xrandr | grep -E " connected (primary )?[1-9]+" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")
# laptop always connected, first in name list:
LAPTOP=$(echo "$ACTIVE" | head -1)
# monitors actively connected with resolution, except laptop
ACTIVEEXTERNAL=$(echo "$ACTIVE" | grep -v "$LAPTOP")
# last active. In multimonitor setups will append next monitor to this
ACTIVELAST=$(echo "$ACTIVE" | tail -1)
# all possible monitors detected
CONNECTED=$(xrandr | grep " connected " | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")
# all except items already actively connected
OTHER=$(xrandr | grep " connected " | grep -vE " connected (primary )?[1-9]+" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")

case "$1" in
  list)
  # List available display ports and connection status
		xrandr --query | \
			egrep 'connected|disconnected' | \
			awk '{print $1" "$2}' | \
			sed 's/ connected/ connected <--/' | \
			egrep --color '\S* '
		;;
  connect)
  # Setup external display. 
  # arguments: [port] [left|right|above|top|below|bottom|mirror] [of <PORT>] [WxH] [rotate]
  #   default possition assumed left.
  #   default port assumed to be first connected monitor other than laptop lcd
  #   WxH will force scaling onto the --auto default resolution
  #   position of arguments is flexible and can be in any order
  #   examples:
  #    $0 left
  #    $0 VGA1 right
  #    $0 mirror VGA1
  #    $0 VGA1 right 1920x1080
  #    $0 VGA1 right rotate
  #    $0 VGA1 right of VGA2 rotate
  #    $0 right of VGA2 rotate
  # in background will remove configuration on disconnect

		if [ -z "$OTHER" ]; then
			echo -e "No external connected\nAvailable:"
			$0 list
			exit 1
		fi

		# Change default "ACTIVEPORT" of argument "of [PORT]" provided
		if echo $@ | grep -q ' of ' ; then
			TARGET=$(echo $@ | sed 's/.* of \([^ ]*\).*/\1/')
		else
			TARGET=$ACTIVELAST
		fi 

		PORT=$(echo "$OTHER" | tail -1)
		POS="--left-of $TARGET"
		SCALE=""
		ROTATE=""

		for arg in "${@:2}"; do
			case "$arg" in
				right)        POS="--right-of $TARGET" ;;
				left) 	      POS="--left-of  $TARGET" ;;
				above|top)    POS="--above $TARGET" ;;
				below|bottom) POS="--below $TARGET" ;;
				mirror)       POS="" ;;
				rotate)       ROTATE="--rotate right" ;;
				*)
					# XxY resolution argument
					if echo "$arg" | egrep -q '^[0-9]*x[0-9]*$'; then
						echo "scale to $arg"
						SCALE="--scale-from $arg"
					# argument defining PORT (monitor being configured now)
					elif echo "$CONNECTED" | grep -q "$arg"; then
						PORT="$arg"
					# finally assume argument is port name that isnt connected
					else
						echo "Could not find connected display named \"$arg\""
						$0 list
						exit 1
					fi
			;;
			esac
		done
		echo "Connecting \"$PORT\" at \"$POS\""
		echo xrandr --output $PORT --auto $POS $SCALE $ROTATE
		xrandr --output $PORT --auto $POS $SCALE $ROTATE
		# Once port is disconnected remove the xrandr settings
		(while [ 1 ]; do sleep 1; xrandr | grep -q "$PORT disconnected" && $0 disconnect $PORT && break; done) &

		;;
	disconnect)
		# disconnect from first non-laptop
		# handle conditions:
		# - user requests to disconnect specific monitor
		# - user requests to disconnect next connected monitor
		if test -n "$2" ; then
			PORT=$2
		else
			# assumes at least one external monitor is still connected
			PORT=$(echo "$ACTIVEEXTERNAL" | head -1)
		fi
		if  test -n "$PORT" ; then
			echo xrandr --output $PORT --off
			xrandr --output $PORT --off
		else
			echo "Error: either no monitors left to disconnect or missing argument (args: $2)"
		fi
		# Check if need in future under condition were monitors disconnected but for some reason desktop canvas still extends beyond current single monitor setup
		#xrandr --auto
	;;

  *)
		usage_self
	;;
esac

exit 0
